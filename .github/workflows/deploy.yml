name: Deploy

on:
  schedule:
    - cron: '0 1 * * *' # 매일 10시 KST (01:00 UTC)
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version
        run: |
          # KST 기준 현재 날짜 가져오기
          CURRENT_DATE=$(TZ='Asia/Seoul' date +'%Y.%m.%d')
          
          # service-worker.js에서 현재 버전 추출
          CURRENT_VERSION=$(grep -oP "const APP_VERSION = '\K[^']+" public/service-worker.js)
          
          # 현재 버전에서 날짜와 번호 분리
          VERSION_DATE=$(echo "$CURRENT_VERSION" | cut -d'.' -f1-3)
          VERSION_NUMBER=$(echo "$CURRENT_VERSION" | cut -d'.' -f4)
          
          # 날짜가 같으면 번호 증가, 다르면 번호 1로 초기화
          if [ "$VERSION_DATE" = "$CURRENT_DATE" ]; then
            NEW_NUMBER=$((VERSION_NUMBER + 1))
          else
            NEW_NUMBER=1
          fi
          
          NEW_VERSION="${CURRENT_DATE}.${NEW_NUMBER}"
          
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          
          # Export version for later steps
          echo "APP_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # service-worker.js 업데이트
          sed -i "s/const APP_VERSION = '[^']*'/const APP_VERSION = '${NEW_VERSION}'/" public/service-worker.js
          
          # App.tsx 업데이트
          sed -i "s/const APP_VERSION = '[^']*'/const APP_VERSION = '${NEW_VERSION}'/" App.tsx
          
          # 변경사항 확인
          echo "Updated service-worker.js:"
          grep "APP_VERSION" public/service-worker.js
          echo "Updated App.tsx:"
          grep "APP_VERSION" App.tsx

      - name: Commit version update
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add App.tsx public/service-worker.js
          git diff --staged --quiet || git commit -m "chore: update version [skip ci]"
          git push

      - name: Build
        run: npm run build

      - name: Deploy with Wrangler
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: npx wrangler deploy

      - name: Send ntfy alert on success
        if: success()
        env:
          NTFY_ACCESS_TOKEN: ${{ secrets.NTFY_ACCESS_TOKEN }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $NTFY_ACCESS_TOKEN" \
            -H 'Title: huny.dev Deploy Success' \
            -H 'Tags: white_check_mark,rocket' \
            -d "v${{ env.APP_VERSION }} | 완료 시각(KST): $(TZ='Asia/Seoul' date +'%Y-%m-%d %H:%M:%S')" \
            https://ntfy.sh/hunydev

      - name: Send ntfy alert on failure
        if: failure()
        env:
          NTFY_ACCESS_TOKEN: ${{ secrets.NTFY_ACCESS_TOKEN }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $NTFY_ACCESS_TOKEN" \
            -H 'Title: huny.dev Deploy Failure' \
            -H 'Tags: warning,x' \
            -d "v${{ env.APP_VERSION }} | 실패 시각(KST): $(TZ='Asia/Seoul' date +'%Y-%m-%d %H:%M:%S')" \
            https://ntfy.sh/hunydev
