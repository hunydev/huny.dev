import React from 'react';
import { PageProps } from '../../types';

// Shape generated by scripts/generate-vscode-extensions.mjs
export type VSCodeExtensionsPayload = {
  generatedAt?: string;
  count?: number;
  error?: string;
  extensions: Array<{
    displayName: string;
    extensionName: string;
    shortDescription: string;
    icon: string;
    publisherDisplayName: string;
    publisherName: string;
    publisherLink: string;
    install: number;
    rating: number; // 0..5
    ratingCount: number;
    lastUpdated: string;
  }>;
};

const RatingStars: React.FC<{ rating: number; ratingCount: number }>
  = ({ rating, ratingCount }) => {
  const pct = Math.max(0, Math.min(100, (rating / 5) * 100));
  const Star = ({ filled }: { filled: boolean }) => (
    <svg viewBox="0 0 20 20" className={`w-4 h-4 ${filled ? 'text-yellow-300' : 'text-gray-600'}`} fill="currentColor" aria-hidden>
      <path d="M9.049 2.927a1 1 0 011.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.801 2.035a1 1 0 00-.364 1.118l1.07 3.292c.3.924-.755 1.688-1.54 1.118l-2.8-2.035a1 1 0 00-1.176 0l-2.8 2.035c-.785.57-1.84-.194-1.54-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.88 8.72c-.783-.57-.38-1.81.588-1.81H6.93a1 1 0 00.95-.69l1.17-3.292z" />
    </svg>
  );
  return (
    <div className="flex items-center gap-1">
      <div className="relative inline-block" aria-label={`Rating ${rating.toFixed(1)} out of 5`} title={`${rating.toFixed(2)} / 5`}>
        <div className="flex">
          {Array.from({ length: 5 }).map((_, i) => (
            <span key={`o-${i}`}><Star filled={false} /></span>
          ))}
        </div>
        <div className="absolute inset-0 overflow-hidden" style={{ width: `${pct}%` }}>
          <div className="flex">
            {Array.from({ length: 5 }).map((_, i) => (
              <span key={`f-${i}`}><Star filled={true} /></span>
            ))}
          </div>
        </div>
      </div>
      <span className="text-xs text-gray-400">({ratingCount.toLocaleString()})</span>
    </div>
  );
};

const ExtensionsPage: React.FC<PageProps> = () => {
  const [data, setData] = React.useState<VSCodeExtensionsPayload | null>(null);
  const [loading, setLoading] = React.useState<boolean>(false);
  const [error, setError] = React.useState<string>('');

  type SortKey = 'publisher' | 'name' | 'download' | 'rating';
  const [sortBy, setSortBy] = React.useState<SortKey>('publisher');
  const [sortDir, setSortDir] = React.useState<'asc' | 'desc'>('asc');

  const onSort = (key: SortKey) => {
    if (sortBy === key) {
      setSortDir((d) => (d === 'asc' ? 'desc' : 'asc'));
    } else {
      setSortBy(key);
      setSortDir('asc');
    }
  };

  const sorted = React.useMemo(() => {
    const arr = Array.isArray(data?.extensions) ? [...(data!.extensions)] : [];
    const collator = new Intl.Collator(undefined, { sensitivity: 'base', numeric: true });
    const cmp = (a: VSCodeExtensionsPayload['extensions'][number], b: VSCodeExtensionsPayload['extensions'][number]) => {
      switch (sortBy) {
        case 'publisher': {
          const A = (a.publisherDisplayName || a.publisherName || '').trim();
          const B = (b.publisherDisplayName || b.publisherName || '').trim();
          return collator.compare(A, B);
        }
        case 'name': {
          const A = (a.displayName || a.extensionName || '').trim();
          const B = (b.displayName || b.extensionName || '').trim();
          return collator.compare(A, B);
        }
        case 'download':
          return (a.install || 0) - (b.install || 0);
        case 'rating':
          return (a.rating || 0) - (b.rating || 0);
        default:
          return 0;
      }
    };
    arr.sort((a, b) => (sortDir === 'asc' ? cmp(a, b) : -cmp(a, b)));
    return arr;
  }, [data, sortBy, sortDir]);

  const SortButton: React.FC<{ keyId: SortKey; label: string }> = ({ keyId, label }) => {
    const active = sortBy === keyId;
    return (
      <button
        onClick={() => onSort(keyId)}
        className={`px-2 py-1 text-xs rounded border transition-colors ${
          active ? 'border-white/30 bg-white/10 text-white' : 'border-white/10 text-gray-300 hover:bg-white/5'
        }`}
      >
        <span>{label}</span>
        {active && (
          <svg className={`w-3 h-3 ml-1 inline-block ${sortDir === 'desc' ? 'rotate-180' : ''}`} viewBox="0 0 16 16" fill="currentColor" aria-hidden>
            <path d="M8 5l4 6H4z" />
          </svg>
        )}
      </button>
    );
  };

  React.useEffect(() => {
    let alive = true;
    (async () => {
      setLoading(true);
      setError('');
      try {
        const res = await fetch('/generated/vscode-extensions.json', { cache: 'no-store' });
        const json = (await res.json()) as VSCodeExtensionsPayload;
        if (!alive) return;
        if (!res.ok) throw new Error(json?.error || `Failed to load (${res.status})`);
        setData(json);
      } catch (e: any) {
        if (!alive) return;
        setError(e?.message || String(e));
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => { alive = false; };
  }, []);

  return (
    <div className="max-w-6xl mx-auto px-4">
      <header className="mb-6">
        <h1 className="text-xl md:text-2xl font-semibold text-white">VSCode Extensions</h1>
        <p className="text-sm text-gray-400">내가 사용하는 VS Code 확장 목록입니다. 빌드 시점에 Marketplace에서 최신 정보를 조회하여 생성됩니다.</p>
      </header>

      <div className="flex items-center gap-2 mb-4">
        <span className="text-xs text-gray-400">Sort:</span>
        <SortButton keyId="publisher" label="Publisher" />
        <SortButton keyId="name" label="Name" />
        <SortButton keyId="download" label="Download" />
        <SortButton keyId="rating" label="Rating" />
      </div>

      {loading && <div className="text-sm text-gray-400">Loading extensions…</div>}
      {error && <div className="text-xs text-amber-300">{error}</div>}

      {sorted.length > 0 ? (
        <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {sorted.map((x, idx) => (
            <li key={`${x.publisherName}.${x.extensionName}-${idx}`} className="rounded border border-white/10 bg-white/[0.03] p-3 flex gap-3">
              <div className="shrink-0 w-10 h-10 rounded bg-[#2d2d2d] border border-white/10 overflow-hidden flex items-center justify-center">
                {x.icon ? (
                  <img src={x.icon} alt="" className="w-10 h-10 object-cover" loading="lazy" decoding="async" />
                ) : (
                  <svg viewBox="0 0 24 24" className="w-6 h-6 text-gray-500" fill="currentColor"><path d="M3 3v18h18V3zm15 15H6v-1h12zm0-2H6v-1h12zm0-4H6V6h12z"/></svg>
                )}
              </div>
              <div className="min-w-0 flex-1">
                <div className="flex items-start justify-between gap-3">
                  <div className="min-w-0">
                    <div className="font-medium text-white truncate" title={x.displayName}>{x.displayName}</div>
                    <div className="text-xs text-gray-400 truncate" title={`${x.publisherDisplayName} · ${x.extensionName}`}>
                      <a href={x.publisherLink} target="_blank" rel="noopener" className="underline text-blue-300">{x.publisherDisplayName}</a>
                      <span className="mx-1">·</span>
                      <span>{x.extensionName}</span>
                    </div>
                  </div>
                  <div className="text-xs text-gray-400 whitespace-nowrap">{x.install.toLocaleString()} installs</div>
                </div>
                <p className="text-sm text-gray-300 mt-1 line-clamp-3">{x.shortDescription}</p>
                <div className="mt-2"><RatingStars rating={x.rating || 0} ratingCount={x.ratingCount || 0} /></div>
              </div>
            </li>
          ))}
        </ul>
      ) : (
        !loading && !error && <div className="text-sm text-gray-400">No extensions found.</div>
      )}
    </div>
  );
};

export default ExtensionsPage;
